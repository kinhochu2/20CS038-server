package cityu.cs.fyp.java_ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ProofOfCoordinates extends Contract {
    public static final String BINARY = "60806040526000805534801561001457600080fd5b50612c50806100246000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638827403611610066578063882740361461019c57806395c93b26146101b8578063afc55cc2146101d4578063bed34bba146101f0578063d9854be3146102205761009e565b806314951051146100a357806325eef7ee146100d3578063558498a2146101045780635ea8ee6c14610135578063776da22614610168575b600080fd5b6100bd60048036038101906100b8919061255b565b610251565b6040516100ca9190612aac565b60405180910390f35b6100ed60048036038101906100e89190612855565b610546565b6040516100fb929190612983565b60405180910390f35b61011e600480360381019061011991906126e0565b610dcd565b60405161012c929190612a7c565b60405180910390f35b61014f600480360381019061014a9190612709565b6111a2565b60405161015f9493929190612a1b565b60405180910390f35b610182600480360381019061017d91906126e0565b611590565b6040516101939594939291906129ac565b60405180910390f35b6101b660048036038101906101b19190612855565b611983565b005b6101d260048036038101906101cd9190612745565b6119a2565b005b6101ee60048036038101906101e99190612855565b611c46565b005b61020a60048036038101906102059190612674565b61216e565b6040516102179190612968565b60405180910390f35b61023a60048036038101906102359190612709565b6121c7565b60405161024892919061293f565b60405180910390f35b600061025b61230c565b6000548160000181815250508c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081602001819052508a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525086816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a0018190525083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160c0018190525080600160008054815260200190815260200160002060008201518160000155602082015181600101908051906020019061045b929190612367565b506040820151816002019080519060200190610478929190612367565b506060820151816003019080519060200190610495929190612367565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906104f9929190612367565b5060c0820151816006019080519060200190610516929190612367565b5060e08201518160070155905050600080815480929190600101919050559150509b9a5050505050505050505050565b6000806000600190506105576123f5565b60036000878152602001908152602001600020604051806080016040529081600082016040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106295780601f106105fe57610100808354040283529160200191610629565b820191906000526020600020905b81548152906001019060200180831161060c57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106cb5780601f106106a0576101008083540402835291602001916106cb565b820191906000526020600020905b8154815290600101906020018083116106ae57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561076d5780601f106107425761010080835404028352916020019161076d565b820191906000526020600020905b81548152906001019060200180831161075057829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108655780601f1061083a57610100808354040283529160200191610865565b820191906000526020600020905b81548152906001019060200180831161084857829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109075780601f106108dc57610100808354040283529160200191610907565b820191906000526020600020905b8154815290600101906020018083116108ea57829003601f168201915b5050505050815260200160078201548152505081526020016008820154815260200160098201548152602001600a820154815250509050600081606001519050606082600001516020015190506000600190505b87811080156109675750845b15610dbb576109746123f5565b60036000858152602001908152602001600020604051806080016040529081600082016040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ae85780601f10610abd57610100808354040283529160200191610ae8565b820191906000526020600020905b815481529060010190602001808311610acb57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b8a5780601f10610b5f57610100808354040283529160200191610b8a565b820191906000526020600020905b815481529060010190602001808311610b6d57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c825780601f10610c5757610100808354040283529160200191610c82565b820191906000526020600020905b815481529060010190602001808311610c6557829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d245780601f10610cf957610100808354040283529160200191610d24565b820191906000526020600020905b815481529060010190602001808311610d0757829003601f168201915b5050505050815260200160078201548152505081526020016008820154815260200160098201548152602001600a82015481525050905080606001519350610d748160000151602001518461216e565b15610d825760009550610d8e565b80600001516020015192505b806000015160000151816020015114610da657600095505b8515610db55781806001019250505b5061095b565b84839650965050505050509250929050565b60606000610dd961230c565b600160008581526020019081526020016000206040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e9b5780601f10610e7057610100808354040283529160200191610e9b565b820191906000526020600020905b815481529060010190602001808311610e7e57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f3d5780601f10610f1257610100808354040283529160200191610f3d565b820191906000526020600020905b815481529060010190602001808311610f2057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fdf5780601f10610fb457610100808354040283529160200191610fdf565b820191906000526020600020905b815481529060010190602001808311610fc257829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110d75780601f106110ac576101008083540402835291602001916110d7565b820191906000526020600020905b8154815290600101906020018083116110ba57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111795780601f1061114e57610100808354040283529160200191611179565b820191906000526020600020905b81548152906001019060200180831161115c57829003601f168201915b5050505050815260200160078201548152505090508060a001518160e001519250925050915091565b60608060608060005b6002600088815260200190815260200160002080549050811015611586578573ffffffffffffffffffffffffffffffffffffffff166002600089815260200190815260200160002082815481106111fe57fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156115795760026000888152602001908152602001600020818154811061126a57fe5b90600052602060002090600702016001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561130f5780601f106112e45761010080835404028352916020019161130f565b820191906000526020600020905b8154815290600101906020018083116112f257829003601f168201915b5050505050945060026000888152602001908152602001600020818154811061133457fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113d95780601f106113ae576101008083540402835291602001916113d9565b820191906000526020600020905b8154815290600101906020018083116113bc57829003601f168201915b505050505093506002600088815260200190815260200160002081815481106113fe57fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114a35780601f10611478576101008083540402835291602001916114a3565b820191906000526020600020905b81548152906001019060200180831161148657829003601f168201915b505050505092506002600088815260200190815260200160002081815481106114c857fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561156d5780601f106115425761010080835404028352916020019161156d565b820191906000526020600020905b81548152906001019060200180831161155057829003601f168201915b50505050509150611586565b80806001019150506111ab565b5092959194509250565b6060806060600060606115a161230c565b600160008881526020019081526020016000206040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116635780601f1061163857610100808354040283529160200191611663565b820191906000526020600020905b81548152906001019060200180831161164657829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117055780601f106116da57610100808354040283529160200191611705565b820191906000526020600020905b8154815290600101906020018083116116e857829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117a75780601f1061177c576101008083540402835291602001916117a7565b820191906000526020600020905b81548152906001019060200180831161178a57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561189f5780601f106118745761010080835404028352916020019161189f565b820191906000526020600020905b81548152906001019060200180831161188257829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119415780601f1061191657610100808354040283529160200191611941565b820191906000526020600020905b81548152906001019060200180831161192457829003601f168201915b50505050508152602001600782015481525050905080602001518160400151826060015183608001518460c00151955095509550955095505091939590929450565b8060016000848152602001908152602001600020600701819055505050565b6119aa612423565b8b8160000181815250508a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525084816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a00181905250818160c0018181525050600260008d8152602001908152602001600020819080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001556020820151816001019080519060200190611b8d929190612367565b506040820151816002019080519060200190611baa929190612367565b506060820151816003019080519060200190611bc7929190612367565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190611c2b929190612367565b5060c082015181600601555050505050505050505050505050565b611c4e6123f5565b600160008481526020019081526020016000206040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d105780601f10611ce557610100808354040283529160200191611d10565b820191906000526020600020905b815481529060010190602001808311611cf357829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611db25780601f10611d8757610100808354040283529160200191611db2565b820191906000526020600020905b815481529060010190602001808311611d9557829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e545780601f10611e2957610100808354040283529160200191611e54565b820191906000526020600020905b815481529060010190602001808311611e3757829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f4c5780601f10611f2157610100808354040283529160200191611f4c565b820191906000526020600020905b815481529060010190602001808311611f2f57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fee5780601f10611fc357610100808354040283529160200191611fee565b820191906000526020600020905b815481529060010190602001808311611fd157829003601f168201915b505050505081526020016007820154815250508160000181905250828160200181815250506002600084815260200190815260200160002080549050816040018181525050818160600181815250508060036000848152602001908152602001600020600082015181600001600082015181600001556020820151816001019080519060200190612080929190612367565b50604082015181600201908051906020019061209d929190612367565b5060608201518160030190805190602001906120ba929190612367565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600501908051906020019061211e929190612367565b5060c082015181600601908051906020019061213b929190612367565b5060e0820151816007015550506020820151816008015560408201518160090155606082015181600a0155905050505050565b6000816040516020016121819190612928565b60405160208183030381529060405280519060200120836040516020016121a89190612928565b6040516020818303038152906040528051906020012014905092915050565b60008060005b6002600086815260200190815260200160002080549050811015612304578373ffffffffffffffffffffffffffffffffffffffff1660026000878152602001908152602001600020828154811061222057fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156122f75760026000868152602001908152602001600020818154811061228c57fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692506002600086815260200190815260200160002081815481106122de57fe5b9060005260206000209060070201600601549150612304565b80806001019150506121cd565b509250929050565b60405180610100016040528060008152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261239d57600085556123e4565b82601f106123b657805160ff19168380011785556123e4565b828001600101855582156123e4579182015b828111156123e35782518255916020019190600101906123c8565b5b5090506123f19190612476565b5090565b604051806080016040528061240861230c565b81526020016000815260200160008152602001600081525090565b6040518060e0016040528060008152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b5b8082111561248f576000816000905550600101612477565b5090565b6000813590506124a281612bec565b92915050565b60008083601f8401126124ba57600080fd5b8235905067ffffffffffffffff8111156124d357600080fd5b6020830191508360018202830111156124eb57600080fd5b9250929050565b600082601f83011261250357600080fd5b813561251661251182612af8565b612ac7565b9150808252602083016020830185838301111561253257600080fd5b61253d838284612b97565b50505092915050565b60008135905061255581612c03565b92915050565b600080600080600080600080600080600060c08c8e03121561257c57600080fd5b60008c013567ffffffffffffffff81111561259657600080fd5b6125a28e828f016124a8565b9b509b505060208c013567ffffffffffffffff8111156125c157600080fd5b6125cd8e828f016124a8565b995099505060408c013567ffffffffffffffff8111156125ec57600080fd5b6125f88e828f016124a8565b9750975050606061260b8e828f01612493565b95505060808c013567ffffffffffffffff81111561262857600080fd5b6126348e828f016124a8565b945094505060a08c013567ffffffffffffffff81111561265357600080fd5b61265f8e828f016124a8565b92509250509295989b509295989b9093969950565b6000806040838503121561268757600080fd5b600083013567ffffffffffffffff8111156126a157600080fd5b6126ad858286016124f2565b925050602083013567ffffffffffffffff8111156126ca57600080fd5b6126d6858286016124f2565b9150509250929050565b6000602082840312156126f257600080fd5b600061270084828501612546565b91505092915050565b6000806040838503121561271c57600080fd5b600061272a85828601612546565b925050602061273b85828601612493565b9150509250929050565b600080600080600080600080600080600060e08c8e03121561276657600080fd5b60006127748e828f01612546565b9b505060208c013567ffffffffffffffff81111561279157600080fd5b61279d8e828f016124a8565b9a509a505060408c013567ffffffffffffffff8111156127bc57600080fd5b6127c88e828f016124a8565b985098505060608c013567ffffffffffffffff8111156127e757600080fd5b6127f38e828f016124a8565b965096505060806128068e828f01612493565b94505060a08c013567ffffffffffffffff81111561282357600080fd5b61282f8e828f016124a8565b935093505060c06128428e828f01612546565b9150509295989b509295989b9093969950565b6000806040838503121561286857600080fd5b600061287685828601612546565b925050602061288785828601612546565b9150509250929050565b61289a81612b4f565b82525050565b6128a981612b61565b82525050565b60006128ba82612b28565b6128c48185612b33565b93506128d4818560208601612ba6565b6128dd81612bdb565b840191505092915050565b60006128f382612b28565b6128fd8185612b44565b935061290d818560208601612ba6565b80840191505092915050565b61292281612b8d565b82525050565b600061293482846128e8565b915081905092915050565b60006040820190506129546000830185612891565b6129616020830184612919565b9392505050565b600060208201905061297d60008301846128a0565b92915050565b600060408201905061299860008301856128a0565b6129a56020830184612919565b9392505050565b600060a08201905081810360008301526129c681886128af565b905081810360208301526129da81876128af565b905081810360408301526129ee81866128af565b90506129fd6060830185612891565b8181036080830152612a0f81846128af565b90509695505050505050565b60006080820190508181036000830152612a3581876128af565b90508181036020830152612a4981866128af565b90508181036040830152612a5d81856128af565b90508181036060830152612a7181846128af565b905095945050505050565b60006040820190508181036000830152612a9681856128af565b9050612aa56020830184612919565b9392505050565b6000602082019050612ac16000830184612919565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612aee57612aed612bd9565b5b8060405250919050565b600067ffffffffffffffff821115612b1357612b12612bd9565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000612b5a82612b6d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612bc4578082015181840152602081019050612ba9565b83811115612bd3576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b612bf581612b4f565b8114612c0057600080fd5b50565b612c0c81612b8d565b8114612c1757600080fd5b5056fea264697066735822122067dd8026925237881367a0ee8dc3e9df065578ce329457609ded3436a9ac150064736f6c63430007040033";

    public static final String FUNC_ADDRESPONSE = "addResponse";

    public static final String FUNC_CREATEREQUEST = "createRequest";

    public static final String FUNC_SETREQUESTSIGNEDHX = "setRequestSignedHx";

    public static final String FUNC_SUBMITBLOCK = "submitBlock";

    public static final String FUNC_COMPARESTRINGS = "compareStrings";

    public static final String FUNC_GETREQUESTSIGNEDHX = "getRequestSignedHx";

    public static final String FUNC_GETRESPONSESIGNEDHX = "getResponseSignedHx";

    public static final String FUNC_LOADREQUESTDETAILS = "loadRequestDetails";

    public static final String FUNC_LOADRESPONSEDETAILS = "loadResponseDetails";

    public static final String FUNC_VERIFYBLOCKS = "verifyBlocks";

    @Deprecated
    protected ProofOfCoordinates(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProofOfCoordinates(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProofOfCoordinates(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProofOfCoordinates(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addResponse(BigInteger requestId, String shipmentId, String witnessLat, String witnessLng, String witnessAddr, String timestamp, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_ADDRESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Utf8String(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(witnessLat), 
                new org.web3j.abi.datatypes.Utf8String(witnessLng), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr), 
                new org.web3j.abi.datatypes.Utf8String(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createRequest(String shipmentId, String proverLat, String proverLng, String proverAddr, String preHx, String timestamp) {
        final Function function = new Function(
                FUNC_CREATEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(proverLat), 
                new org.web3j.abi.datatypes.Utf8String(proverLng), 
                new org.web3j.abi.datatypes.Address(160, proverAddr), 
                new org.web3j.abi.datatypes.Utf8String(preHx), 
                new org.web3j.abi.datatypes.Utf8String(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRequestSignedHx(BigInteger requestId, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_SETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitBlock(BigInteger requestId, BigInteger preBlockHx) {
        final Function function = new Function(
                FUNC_SUBMITBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(preBlockHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> compareStrings(String a, String b) {
        final Function function = new Function(FUNC_COMPARESTRINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a), 
                new org.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getRequestSignedHx(BigInteger requestId) {
        final Function function = new Function(FUNC_GETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getResponseSignedHx(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_GETRESPONSESIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> loadRequestDetails(BigInteger requestId) {
        final Function function = new Function(FUNC_LOADREQUESTDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, String, String, String>> loadResponseDetails(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_LOADRESPONSEDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, String>>(function,
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<Boolean, BigInteger>> verifyBlocks(BigInteger blockHx, BigInteger totalCount) {
        final Function function = new Function(FUNC_VERIFYBLOCKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockHx), 
                new org.web3j.abi.datatypes.generated.Uint256(totalCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<Boolean, BigInteger>>(function,
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    @Deprecated
    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfCoordinates(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfCoordinates(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProofOfCoordinates(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProofOfCoordinates(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
