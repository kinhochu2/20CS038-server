package cityu.cs.fyp.java_ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ProofOfCoordinates extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ADDRESPONSE = "addResponse";

    public static final String FUNC_BLOCKLIST = "blockList";

    public static final String FUNC_COMPARESTRINGS = "compareStrings";

    public static final String FUNC_CREATEREQUEST = "createRequest";

    public static final String FUNC_GETREQUESTSIGNEDHX = "getRequestSignedHx";

    public static final String FUNC_GETREQUESTSBYSHIPMENTID = "getRequestsByShipmentId";

    public static final String FUNC_GETRESPONSEBYREQUESTID = "getResponseByRequestId";

    public static final String FUNC_GETRESPONSESIGNEDHX = "getResponseSignedHx";

    public static final String FUNC_LOADREQUESTDETAILS = "loadRequestDetails";

    public static final String FUNC_LOADRESPONSEDETAILS = "loadResponseDetails";

    public static final String FUNC_REQUESTLIST = "requestList";

    public static final String FUNC_RESPONSELIST = "responseList";

    public static final String FUNC_SETREQUESTSIGNEDHX = "setRequestSignedHx";

    public static final String FUNC_SUBMITBLOCK = "submitBlock";

    public static final String FUNC_VERIFYBLOCKS = "verifyBlocks";

    @Deprecated
    protected ProofOfCoordinates(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProofOfCoordinates(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProofOfCoordinates(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProofOfCoordinates(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addResponse(BigInteger requestId, String shipmentId, String witnessLat, String witnessLng, String witnessAddr, String timestamp, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_ADDRESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Utf8String(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(witnessLat), 
                new org.web3j.abi.datatypes.Utf8String(witnessLng), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr), 
                new org.web3j.abi.datatypes.Utf8String(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<Request, BigInteger, BigInteger, BigInteger>> blockList(BigInteger param0) {
        final Function function = new Function(FUNC_BLOCKLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Request>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Request, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<Request, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<Request, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Request, BigInteger, BigInteger, BigInteger>(
                                (Request) results.get(0), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> compareStrings(String a, String b) {
        final Function function = new Function(FUNC_COMPARESTRINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a), 
                new org.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createRequest(String shipmentId, String sellerLat, String sellerLng, String sellerAddr, String preHx, String timestamp) {
        final Function function = new Function(
                FUNC_CREATEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(sellerLat), 
                new org.web3j.abi.datatypes.Utf8String(sellerLng), 
                new org.web3j.abi.datatypes.Address(160, sellerAddr), 
                new org.web3j.abi.datatypes.Utf8String(preHx), 
                new org.web3j.abi.datatypes.Utf8String(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getRequestSignedHx(BigInteger requestId) {
        final Function function = new Function(FUNC_GETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>> getRequestsByShipmentId(String shipmentId) {
        final Function function = new Function(FUNC_GETREQUESTSBYSHIPMENTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(shipmentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>> getResponseByRequestId(BigInteger requestId) {
        final Function function = new Function(FUNC_GETRESPONSEBYREQUESTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<String>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<String>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<String>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getResponseSignedHx(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_GETRESPONSESIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> loadRequestDetails(BigInteger requestId) {
        final Function function = new Function(FUNC_LOADREQUESTDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, String, String, String>> loadResponseDetails(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_LOADRESPONSEDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, String>>(function,
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, String, String, BigInteger>> requestList(BigInteger param0) {
        final Function function = new Function(FUNC_REQUESTLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, String, String, String, String, String, String, BigInteger>>(function,
                new Callable<Tuple8<BigInteger, String, String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, String, String, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, String, String, String, String, BigInteger>> responseList(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_RESPONSELIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, String, String, String, String, BigInteger>>(function,
                new Callable<Tuple7<BigInteger, String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, String, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setRequestSignedHx(BigInteger requestId, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_SETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitBlock(BigInteger requestId, BigInteger preBlockHx) {
        final Function function = new Function(
                FUNC_SUBMITBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(preBlockHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<Boolean, BigInteger>> verifyBlocks(BigInteger blockHx, BigInteger totalCount) {
        final Function function = new Function(FUNC_VERIFYBLOCKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockHx), 
                new org.web3j.abi.datatypes.generated.Uint256(totalCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<Boolean, BigInteger>>(function,
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    @Deprecated
    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfCoordinates(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfCoordinates(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProofOfCoordinates(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProofOfCoordinates load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProofOfCoordinates(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfCoordinates> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfCoordinates.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Request extends DynamicStruct {
        public BigInteger requestId;

        public String shipmentId;

        public String sellerLat;

        public String sellerLng;

        public String sellerAddr;

        public String preHx;

        public String timestamp;

        public BigInteger signedHx;

        public Request(BigInteger requestId, String shipmentId, String sellerLat, String sellerLng, String sellerAddr, String preHx, String timestamp, BigInteger signedHx) {
            super(new org.web3j.abi.datatypes.generated.Uint256(requestId),new org.web3j.abi.datatypes.Utf8String(shipmentId),new org.web3j.abi.datatypes.Utf8String(sellerLat),new org.web3j.abi.datatypes.Utf8String(sellerLng),new org.web3j.abi.datatypes.Address(sellerAddr),new org.web3j.abi.datatypes.Utf8String(preHx),new org.web3j.abi.datatypes.Utf8String(timestamp),new org.web3j.abi.datatypes.generated.Uint256(signedHx));
            this.requestId = requestId;
            this.shipmentId = shipmentId;
            this.sellerLat = sellerLat;
            this.sellerLng = sellerLng;
            this.sellerAddr = sellerAddr;
            this.preHx = preHx;
            this.timestamp = timestamp;
            this.signedHx = signedHx;
        }

        public Request(Uint256 requestId, Utf8String shipmentId, Utf8String sellerLat, Utf8String sellerLng, Address sellerAddr, Utf8String preHx, Utf8String timestamp, Uint256 signedHx) {
            super(requestId,shipmentId,sellerLat,sellerLng,sellerAddr,preHx,timestamp,signedHx);
            this.requestId = requestId.getValue();
            this.shipmentId = shipmentId.getValue();
            this.sellerLat = sellerLat.getValue();
            this.sellerLng = sellerLng.getValue();
            this.sellerAddr = sellerAddr.getValue();
            this.preHx = preHx.getValue();
            this.timestamp = timestamp.getValue();
            this.signedHx = signedHx.getValue();
        }
    }
}
