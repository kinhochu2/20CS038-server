package cityu.cs.fyp.java_ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class MarketContract extends Contract {
    public static final String BINARY = "6080604052600060035534801561001557600080fd5b50613244806100256000396000f3fe6080604052600436106100a75760003560e01c8063ccc2db3411610064578063ccc2db3414610234578063d37a29b114610271578063d674742c1461028d578063d9561a91146102bc578063eb4c733c146102f9578063ed2fb85d14610315576100a7565b806318b17c56146100ac578063421d3dcd146100e95780634c4df8701461012f5780638fdc21b21461016c578063913a9f63146101ad578063990513d1146101f3575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190612a8f565b61035b565b6040516100e09190612fb0565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190612b70565b61074a565b6040516101269a99989796959493929190612fcb565b60405180910390f35b34801561013b57600080fd5b5061015660048036038101906101519190612c47565b6109d0565b6040516101639190612fb0565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190612a66565b6109ef565b6040516101a4959493929190612f18565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf9190612b70565b610f7c565b6040516101ea9a99989796959493929190612fcb565b60405180910390f35b3480156101ff57600080fd5b5061021a60048036038101906102159190612a66565b611202565b60405161022b959493929190612f18565b60405180910390f35b34801561024057600080fd5b5061025b60048036038101906102569190612c47565b61178f565b6040516102689190612f8e565b60405180910390f35b61028b60048036038101906102869190612ade565b611846565b005b34801561029957600080fd5b506102a2611f1e565b6040516102b3959493929190612ea2565b60405180910390f35b3480156102c857600080fd5b506102e360048036038101906102de9190612c47565b612337565b6040516102f09190612f8e565b60405180910390f35b610313600480360381019061030e9190612bac565b6123ee565b005b34801561032157600080fd5b5061033c60048036038101906103379190612c47565b61265d565b6040516103529a99989796959493929190612fcb565b60405180910390f35b600080600090505b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156105515782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106103f857fe5b90600052602060002090600a0201600801541415610544576001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061045c57fe5b90600052602060002090600a020160090160006101000a81548160ff021916908315150217905550600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106104ce57fe5b90600052602060002090600a020160070154600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061052a57fe5b90600052602060002090600a020160060154029150610551565b8080600101915050610363565b5060005b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156107425782600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106105ea57fe5b90600052602060002090600a02016008015414156107355760018060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061064d57fe5b90600052602060002090600a020160090160006101000a81548160ff021916908315150217905550600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106106bf57fe5b90600052602060002090600a020160070154600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061071b57fe5b90600052602060002090600a020160060154029150610742565b8080600101915050610555565b509392505050565b6001602052816000526040600020818154811061076657600080fd5b90600052602060002090600a020160009150915050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108195780601f106107ee57610100808354040283529160200191610819565b820191906000526020600020905b8154815290600101906020018083116107fc57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109a15780601f10610976576101008083540402835291602001916109a1565b820191906000526020600020905b81548152906001019060200180831161098457829003601f168201915b5050505050908060060154908060070154908060080154908060090160009054906101000a900460ff1690508a565b6000806000838152602001908152602001600020600601549050919050565b60608060608060606000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000811115610bba578067ffffffffffffffff81118015610a5e57600080fd5b50604051908082528060200260200182016040528015610a8d5781602001602082028036833780820191505090505b5095508067ffffffffffffffff81118015610aa757600080fd5b50604051908082528060200260200182016040528015610ad65781602001602082028036833780820191505090505b5094508067ffffffffffffffff81118015610af057600080fd5b50604051908082528060200260200182016040528015610b1f5781602001602082028036833780820191505090505b5093508067ffffffffffffffff81118015610b3957600080fd5b50604051908082528060200260200182016040528015610b6d57816020015b6060815260200190600190039081610b585790505b5092508067ffffffffffffffff81118015610b8757600080fd5b50604051908082528060200260200182016040528015610bb65781602001602082028036833780820191505090505b5091505b60005b81811015610f715760001515600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610c1357fe5b90600052602060002090600a020160090160009054906101000a900460ff1615151415610f6457600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110610c8457fe5b90600052602060002090600a020160000154878281518110610ca257fe5b602002602001018181525050600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110610cf857fe5b90600052602060002090600a020160080154868281518110610d1657fe5b602002602001018181525050600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110610d6c57fe5b90600052602060002090600a020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858281518110610daa57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110610e2e57fe5b90600052602060002090600a02016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ed35780601f10610ea857610100808354040283529160200191610ed3565b820191906000526020600020905b815481529060010190602001808311610eb657829003601f168201915b5050505050848281518110610ee457fe5b6020026020010181905250600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110610f3957fe5b90600052602060002090600a020160070154838281518110610f5757fe5b6020026020010181815250505b8080600101915050610bbd565b505091939590929450565b60026020528160005260406000208181548110610f9857600080fd5b90600052602060002090600a020160009150915050806000015490806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561104b5780601f106110205761010080835404028352916020019161104b565b820191906000526020600020905b81548152906001019060200180831161102e57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561110f5780601f106110e45761010080835404028352916020019161110f565b820191906000526020600020905b8154815290600101906020018083116110f257829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111d35780601f106111a8576101008083540402835291602001916111d3565b820191906000526020600020905b8154815290600101906020018083116111b657829003601f168201915b5050505050908060060154908060070154908060080154908060090160009054906101000a900460ff1690508a565b60608060608060606000600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008111156113cd578067ffffffffffffffff8111801561127157600080fd5b506040519080825280602002602001820160405280156112a05781602001602082028036833780820191505090505b5095508067ffffffffffffffff811180156112ba57600080fd5b506040519080825280602002602001820160405280156112e95781602001602082028036833780820191505090505b5094508067ffffffffffffffff8111801561130357600080fd5b506040519080825280602002602001820160405280156113325781602001602082028036833780820191505090505b5093508067ffffffffffffffff8111801561134c57600080fd5b5060405190808252806020026020018201604052801561138057816020015b606081526020019060019003908161136b5790505b5092508067ffffffffffffffff8111801561139a57600080fd5b506040519080825280602002602001820160405280156113c95781602001602082028036833780820191505090505b5091505b60005b818110156117845760001515600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061142657fe5b90600052602060002090600a020160090160009054906101000a900460ff161515141561177757600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061149757fe5b90600052602060002090600a0201600001548782815181106114b557fe5b602002602001018181525050600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061150b57fe5b90600052602060002090600a02016008015486828151811061152957fe5b602002602001018181525050600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061157f57fe5b90600052602060002090600a020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168582815181106115bd57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061164157fe5b90600052602060002090600a02016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116e65780601f106116bb576101008083540402835291602001916116e6565b820191906000526020600020905b8154815290600101906020018083116116c957829003601f168201915b50505050508482815181106116f757fe5b6020026020010181905250600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061174c57fe5b90600052602060002090600a02016007015483828151811061176a57fe5b6020026020010181815250505b80806001019150506113d0565b505091939590929450565b60606000808381526020019081526020016000206003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561183a5780601f1061180f5761010080835404028352916020019161183a565b820191906000526020600020905b81548152906001019060200180831161181d57829003601f168201915b50505050509050919050565b61184e6128c6565b6000808581526020019081526020016000206040518061014001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561190f5780601f106118e45761010080835404028352916020019161190f565b820191906000526020600020905b8154815290600101906020018083116118f257829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a075780601f106119dc57610100808354040283529160200191611a07565b820191906000526020600020905b8154815290600101906020018083116119ea57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611aff5780601f10611ad457610100808354040283529160200191611aff565b820191906000526020600020905b815481529060010190602001808311611ae257829003601f168201915b505050505081526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581525050905086816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a00181905250828160e00181815250508181610100018181525050600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600a0201600090919091909150600082015181600001556020820151816001019080519060200190611c6c929190612947565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190611cd0929190612947565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190611d34929190612947565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff021916908315150217905550505060016000826040015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600a0201600090919091909150600082015181600001556020820151816001019080519060200190611e0a929190612947565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003019080519060200190611e6e929190612947565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190611ed2929190612947565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff021916908315150217905550505050505050505050565b6060806060806060600060035411156120b35760035467ffffffffffffffff81118015611f4a57600080fd5b50604051908082528060200260200182016040528015611f795781602001602082028036833780820191505090505b50945060035467ffffffffffffffff81118015611f9557600080fd5b50604051908082528060200260200182016040528015611fc957816020015b6060815260200190600190039081611fb45790505b50935060035467ffffffffffffffff81118015611fe557600080fd5b506040519080825280602002602001820160405280156120145781602001602082028036833780820191505090505b50925060035467ffffffffffffffff8111801561203057600080fd5b5060405190808252806020026020018201604052801561206457816020015b606081526020019060019003908161204f5790505b50915060035467ffffffffffffffff8111801561208057600080fd5b506040519080825280602002602001820160405280156120af5781602001602082028036833780820191505090505b5090505b60005b60035481101561232f57600080828152602001908152602001600020600001548682815181106120e257fe5b6020026020010181815250506000808281526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121975780601f1061216c57610100808354040283529160200191612197565b820191906000526020600020905b81548152906001019060200180831161217a57829003601f168201915b50505050508582815181106121a857fe5b602002602001018190525060008082815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168482815181106121f557fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000808281526020019081526020016000206003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122d85780601f106122ad576101008083540402835291602001916122d8565b820191906000526020600020905b8154815290600101906020018083116122bb57829003601f168201915b50505050508382815181106122e957fe5b60200260200101819052506000808281526020019081526020016000206006015482828151811061231657fe5b60200260200101818152505080806001019150506120b6565b509091929394565b60606000808381526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123e25780601f106123b7576101008083540402835291602001916123e2565b820191906000526020600020905b8154815290600101906020018083116123c557829003601f168201915b50505050509050919050565b6123f66128c6565b60035481600001818152505086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525084816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160600181905250818160c001818152505060018160e0018181525050600081610120019015159081151581525050806000806003548152602001908152602001600020600082015181600001556020820151816001019080519060200190612536929190612947565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019061259a929190612947565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906125fe929190612947565b5060c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff02191690831515021790555090505060036000815480929190600101919050555050505050505050565b6000602052806000526040600020600091509050806000015490806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561270f5780601f106126e45761010080835404028352916020019161270f565b820191906000526020600020905b8154815290600101906020018083116126f257829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127d35780601f106127a8576101008083540402835291602001916127d3565b820191906000526020600020905b8154815290600101906020018083116127b657829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128975780601f1061286c57610100808354040283529160200191612897565b820191906000526020600020905b81548152906001019060200180831161287a57829003601f168201915b5050505050908060060154908060070154908060080154908060090160009054906101000a900460ff1690508a565b6040518061014001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160008152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261297d57600085556129c4565b82601f1061299657805160ff19168380011785556129c4565b828001600101855582156129c4579182015b828111156129c35782518255916020019190600101906129a8565b5b5090506129d191906129d5565b5090565b5b808211156129ee5760008160009055506001016129d6565b5090565b600081359050612a01816131e0565b92915050565b60008083601f840112612a1957600080fd5b8235905067ffffffffffffffff811115612a3257600080fd5b602083019150836001820283011115612a4a57600080fd5b9250929050565b600081359050612a60816131f7565b92915050565b600060208284031215612a7857600080fd5b6000612a86848285016129f2565b91505092915050565b600080600060608486031215612aa457600080fd5b6000612ab2868287016129f2565b9350506020612ac3868287016129f2565b9250506040612ad486828701612a51565b9150509250925092565b60008060008060008060a08789031215612af757600080fd5b6000612b0589828a016129f2565b965050602087013567ffffffffffffffff811115612b2257600080fd5b612b2e89828a01612a07565b95509550506040612b4189828a01612a51565b9350506060612b5289828a01612a51565b9250506080612b6389828a01612a51565b9150509295509295509295565b60008060408385031215612b8357600080fd5b6000612b91858286016129f2565b9250506020612ba285828601612a51565b9150509250929050565b60008060008060008060808789031215612bc557600080fd5b600087013567ffffffffffffffff811115612bdf57600080fd5b612beb89828a01612a07565b96509650506020612bfe89828a016129f2565b945050604087013567ffffffffffffffff811115612c1b57600080fd5b612c2789828a01612a07565b93509350506060612c3a89828a01612a51565b9150509295509295509295565b600060208284031215612c5957600080fd5b6000612c6784828501612a51565b91505092915050565b6000612c7c8383612cb4565b60208301905092915050565b6000612c948383612e12565b905092915050565b6000612ca88383612e84565b60208301905092915050565b612cbd81613154565b82525050565b612ccc81613154565b82525050565b6000612cdd826130ac565b612ce781856130ff565b9350612cf28361307c565b8060005b83811015612d23578151612d0a8882612c70565b9750612d15836130d8565b925050600181019050612cf6565b5085935050505092915050565b6000612d3b826130b7565b612d458185613110565b935083602082028501612d578561308c565b8060005b85811015612d935784840389528151612d748582612c88565b9450612d7f836130e5565b925060208a01995050600181019050612d5b565b50829750879550505050505092915050565b6000612db0826130c2565b612dba8185613121565b9350612dc58361309c565b8060005b83811015612df6578151612ddd8882612c9c565b9750612de8836130f2565b925050600181019050612dc9565b5085935050505092915050565b612e0c81613166565b82525050565b6000612e1d826130cd565b612e278185613132565b9350612e3781856020860161319c565b612e40816131cf565b840191505092915050565b6000612e56826130cd565b612e608185613143565b9350612e7081856020860161319c565b612e79816131cf565b840191505092915050565b612e8d81613192565b82525050565b612e9c81613192565b82525050565b600060a0820190508181036000830152612ebc8188612da5565b90508181036020830152612ed08187612d30565b90508181036040830152612ee48186612cd2565b90508181036060830152612ef88185612d30565b90508181036080830152612f0c8184612da5565b90509695505050505050565b600060a0820190508181036000830152612f328188612da5565b90508181036020830152612f468187612da5565b90508181036040830152612f5a8186612cd2565b90508181036060830152612f6e8185612d30565b90508181036080830152612f828184612da5565b90509695505050505050565b60006020820190508181036000830152612fa88184612e4b565b905092915050565b6000602082019050612fc56000830184612e93565b92915050565b600061014082019050612fe1600083018d612e93565b8181036020830152612ff3818c612e4b565b9050613002604083018b612cc3565b8181036060830152613014818a612e4b565b90506130236080830189612cc3565b81810360a08301526130358188612e4b565b905061304460c0830187612e93565b61305160e0830186612e93565b61305f610100830185612e93565b61306d610120830184612e03565b9b9a5050505050505050505050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061315f82613172565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156131ba57808201518184015260208101905061319f565b838111156131c9576000848401525b50505050565b6000601f19601f8301169050919050565b6131e981613154565b81146131f457600080fd5b50565b61320081613192565b811461320b57600080fd5b5056fea26469706673582212205f8394a2b91d255ab432c4208a363efbeb722b5e706517a368e457d3baab01ee64736f6c63430007040033";

    public static final String FUNC_ADDITEMTOMARKET = "addItemToMarket";

    public static final String FUNC_BUYITEM = "buyItem";

    public static final String FUNC_BUYERITEMLIST = "buyerItemList";

    public static final String FUNC_FINISHSHIPPING = "finishShipping";

    public static final String FUNC_GETITEMNAME = "getItemName";

    public static final String FUNC_GETITEMPRICE = "getItemPrice";

    public static final String FUNC_GETITEMSELLERLOCATION = "getItemSellerLocation";

    public static final String FUNC_GETITEMSFROMMARKET = "getItemsFromMarket";

    public static final String FUNC_GETUNPAIDITEMSFROMBUYER = "getUnpaidItemsFromBuyer";

    public static final String FUNC_GETUNPAIDITEMSFROMSELLER = "getUnpaidItemsFromSeller";

    public static final String FUNC_MARKETITEMLIST = "marketItemList";

    public static final String FUNC_SELLERITEMLIST = "sellerItemList";

    @Deprecated
    protected MarketContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MarketContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MarketContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MarketContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addItemToMarket(String name, String seller, String sellerLocation, BigInteger price) {
        final Function function = new Function(
                FUNC_ADDITEMTOMARKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Address(160, seller), 
                new org.web3j.abi.datatypes.Utf8String(sellerLocation), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buyItem(String buyer, String buyerLocation, BigInteger itemId, BigInteger amount, BigInteger shipmentId) {
        final Function function = new Function(
                FUNC_BUYITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buyer), 
                new org.web3j.abi.datatypes.Utf8String(buyerLocation), 
                new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(shipmentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>> buyerItemList(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_BUYERITEMLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (Boolean) results.get(9).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> finishShipping(String buyer, String seller, BigInteger shipmentId) {
        final Function function = new Function(
                FUNC_FINISHSHIPPING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buyer), 
                new org.web3j.abi.datatypes.Address(160, seller), 
                new org.web3j.abi.datatypes.generated.Uint256(shipmentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getItemName(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getItemPrice(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getItemSellerLocation(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMSELLERLOCATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<List<BigInteger>, List<String>, List<String>, List<String>, List<BigInteger>>> getItemsFromMarket() {
        final Function function = new Function(FUNC_GETITEMSFROMMARKET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<List<BigInteger>, List<String>, List<String>, List<String>, List<BigInteger>>>(function,
                new Callable<Tuple5<List<BigInteger>, List<String>, List<String>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<BigInteger>, List<String>, List<String>, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<BigInteger>, List<String>, List<String>, List<String>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Address>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>> getUnpaidItemsFromBuyer(String buyer) {
        final Function function = new Function(FUNC_GETUNPAIDITEMSFROMBUYER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buyer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>>(function,
                new Callable<Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Address>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>> getUnpaidItemsFromSeller(String seller) {
        final Function function = new Function(FUNC_GETUNPAIDITEMSFROMSELLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, seller)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>>(function,
                new Callable<Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<List<BigInteger>, List<BigInteger>, List<String>, List<String>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Address>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()), 
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>> marketItemList(BigInteger param0) {
        final Function function = new Function(FUNC_MARKETITEMLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (Boolean) results.get(9).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>> sellerItemList(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_SELLERITEMLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<BigInteger, String, String, String, String, String, BigInteger, BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (Boolean) results.get(9).getValue());
                    }
                });
    }

    @Deprecated
    public static MarketContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MarketContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MarketContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MarketContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MarketContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MarketContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MarketContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MarketContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MarketContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MarketContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MarketContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MarketContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MarketContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MarketContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MarketContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MarketContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
