package cityu.cs.fyp.java_ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ProofOfLocation extends Contract {
    public static final String BINARY = "608060405260008055600060035534801561001957600080fd5b506133fe806100296000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063776da2261161008c578063afc55cc211610066578063afc55cc214610257578063ca86ed3014610273578063d8a4676f1461028f578063d9854be3146102c1576100cf565b8063776da226146101eb578063882740361461021f578063a0a32beb1461023b576100cf565b80630a237027146100d457806325eef7ee146100f05780635186d4c614610121578063558498a2146101545780635ea8ee6c1461018557806363b492bd146101b8575b600080fd5b6100ee60048036038101906100e99190612cdb565b6102f2565b005b61010a60048036038101906101059190612c9f565b61053f565b6040516101189291906130eb565b60405180910390f35b61013b60048036038101906101369190612b5b565b610ba9565b60405161014b9493929190613029565b60405180910390f35b61016e60048036038101906101699190612b5b565b6110c3565b60405161017c9291906131d6565b60405180910390f35b61019f600480360381019061019a9190612b84565b611382565b6040516101af949392919061317c565b60405180910390f35b6101d260048036038101906101cd9190612b5b565b6116d9565b6040516101e2949392919061308a565b60405180910390f35b61020560048036038101906102009190612b5b565b611af1565b604051610216959493929190613114565b60405180910390f35b61023960048036038101906102349190612c9f565b611dcf565b005b61025560048036038101906102509190612bc0565b611dee565b005b610271600480360381019061026c9190612c9f565b6120c3565b005b61028d60048036038101906102889190612b5b565b612519565b005b6102a960048036038101906102a49190612b5b565b612540565b6040516102b8939291906131ff565b60405180910390f35b6102db60048036038101906102d69190612b84565b61280b565b6040516102e9929190613000565b60405180910390f35b6102fa612950565b8a8160000181815250508981602001818152505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525084816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a00181905250818160c0018181525050600260008c8152602001908152602001600020819080600181540180825580915050600190039060005260206000209060070201600090919091909150600082015181600001556020820151816001015560408201518160020190805190602001906104a49291906129a3565b5060608201518160030190805190602001906104c19291906129a3565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906105259291906129a3565b5060c0820151816006015550505050505050505050505050565b600080600060019050610550612a31565b600460008781526020019081526020016000206040518060a001604052908160008201604051806101200160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062c5780601f106106015761010080835404028352916020019161062c565b820191906000526020600020905b81548152906001019060200180831161060f57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ce5780601f106106a3576101008083540402835291602001916106ce565b820191906000526020600020905b8154815290600101906020018083116106b157829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107d05780601f106107a5576101008083540402835291602001916107d0565b820191906000526020600020905b8154815290600101906020018083116107b357829003601f168201915b50505050508152602001600782015481526020016008820160009054906101000a900460ff161515151581525050815260200160098201548152602001600a8201548152602001600b8201548152602001600c820154815250509050600081606001519050600082600001516020015190506000600190505b87811080156108555750845b15610b9757610862612a31565b600460008581526020019081526020016000206040518060a001604052908160008201604051806101200160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093e5780601f106109135761010080835404028352916020019161093e565b820191906000526020600020905b81548152906001019060200180831161092157829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e05780601f106109b5576101008083540402835291602001916109e0565b820191906000526020600020905b8154815290600101906020018083116109c357829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ae25780601f10610ab757610100808354040283529160200191610ae2565b820191906000526020600020905b815481529060010190602001808311610ac557829003601f168201915b50505050508152602001600782015481526020016008820160009054906101000a900460ff161515151581525050815260200160098201548152602001600a8201548152602001600b8201548152602001600c82015481525050905080606001519350828160000151602001511415610b5e5760009550610b6a565b80600001516020015192505b806000015160000151816020015114610b8257600095505b8515610b915781806001019250505b50610849565b84839650965050505050509250929050565b606080606080600060026000878152602001908152602001600020805490501115610d5a57600260008681526020019081526020016000208054905067ffffffffffffffff81118015610bfb57600080fd5b50604051908082528060200260200182016040528015610c2a5781602001602082028036833780820191505090505b509350600260008681526020019081526020016000208054905067ffffffffffffffff81118015610c5a57600080fd5b50604051908082528060200260200182016040528015610c8e57816020015b6060815260200190600190039081610c795790505b509250600260008681526020019081526020016000208054905067ffffffffffffffff81118015610cbe57600080fd5b50604051908082528060200260200182016040528015610cf257816020015b6060815260200190600190039081610cdd5790505b509150600260008681526020019081526020016000208054905067ffffffffffffffff81118015610d2257600080fd5b50604051908082528060200260200182016040528015610d5657816020015b6060815260200190600190039081610d415790505b5090505b60005b60026000878152602001908152602001600020805490508110156110bb57600260008781526020019081526020016000208181548110610d9957fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858281518110610dd757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008781526020019081526020016000208181548110610e2f57fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ed45780601f10610ea957610100808354040283529160200191610ed4565b820191906000526020600020905b815481529060010190602001808311610eb757829003601f168201915b5050505050848281518110610ee557fe5b6020026020010181905250600260008781526020019081526020016000208181548110610f0e57fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b5050505050838281518110610fc457fe5b6020026020010181905250600260008781526020019081526020016000208181548110610fed57fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110925780601f1061106757610100808354040283529160200191611092565b820191906000526020600020905b81548152906001019060200180831161107557829003601f168201915b50505050508282815181106110a357fe5b60200260200101819052508080600101915050610d5d565b509193509193565b6000806110ce612a66565b60016000858152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561119a5780601f1061116f5761010080835404028352916020019161119a565b820191906000526020600020905b81548152906001019060200180831161117d57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561123c5780601f106112115761010080835404028352916020019161123c565b820191906000526020600020905b81548152906001019060200180831161121f57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561133e5780601f106113135761010080835404028352916020019161133e565b820191906000526020600020905b81548152906001019060200180831161132157829003601f168201915b50505050508152602001600782015481526020016008820160009054906101000a900460ff16151515158152505090508060a001518160e001519250925050915091565b6000606080606060005b60026000888152602001908152602001600020805490508110156116cf578573ffffffffffffffffffffffffffffffffffffffff166002600089815260200190815260200160002082815481106113df57fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116c25760026000888152602001908152602001600020818154811061144b57fe5b906000526020600020906007020160010154945060026000888152602001908152602001600020818154811061147d57fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115225780601f106114f757610100808354040283529160200191611522565b820191906000526020600020905b81548152906001019060200180831161150557829003601f168201915b5050505050935060026000888152602001908152602001600020818154811061154757fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115ec5780601f106115c1576101008083540402835291602001916115ec565b820191906000526020600020905b8154815290600101906020018083116115cf57829003601f168201915b5050505050925060026000888152602001908152602001600020818154811061161157fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116b65780601f1061168b576101008083540402835291602001916116b6565b820191906000526020600020905b81548152906001019060200180831161169957829003601f168201915b505050505091506116cf565b808060010191505061138c565b5092959194509250565b606080606080600080541115611aea5760005467ffffffffffffffff8111801561170257600080fd5b506040519080825280602002602001820160405280156117315781602001602082028036833780820191505090505b50935060005467ffffffffffffffff8111801561174d57600080fd5b5060405190808252806020026020018201604052801561178157816020015b606081526020019060019003908161176c5790505b50925060005467ffffffffffffffff8111801561179d57600080fd5b506040519080825280602002602001820160405280156117d157816020015b60608152602001906001900390816117bc5790505b50915060005467ffffffffffffffff811180156117ed57600080fd5b5060405190808252806020026020018201604052801561182157816020015b606081526020019060019003908161180c5790505b5090506000805b600054811015611ae7578660016000838152602001908152602001600020600101541415611ada57600160008281526020019081526020016000206000015486838151811061187357fe5b602002602001018181525050600160008281526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119295780601f106118fe57610100808354040283529160200191611929565b820191906000526020600020905b81548152906001019060200180831161190c57829003601f168201915b505050505085838151811061193a57fe5b6020026020010181905250600160008281526020019081526020016000206003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119ef5780601f106119c4576101008083540402835291602001916119ef565b820191906000526020600020905b8154815290600101906020018083116119d257829003601f168201915b5050505050848381518110611a0057fe5b6020026020010181905250600160008281526020019081526020016000206006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ab55780601f10611a8a57610100808354040283529160200191611ab5565b820191906000526020600020905b815481529060010190602001808311611a9857829003601f168201915b5050505050838381518110611ac657fe5b602002602001018190525081806001019250505b8080600101915050611828565b50505b9193509193565b600060608060006060611b02612a66565b60016000888152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bce5780601f10611ba357610100808354040283529160200191611bce565b820191906000526020600020905b815481529060010190602001808311611bb157829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c705780601f10611c4557610100808354040283529160200191611c70565b820191906000526020600020905b815481529060010190602001808311611c5357829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d725780601f10611d4757610100808354040283529160200191611d72565b820191906000526020600020905b815481529060010190602001808311611d5557829003601f168201915b50505050508152602001600782015481526020016008820160009054906101000a900460ff161515151581525050905080602001518160400151826060015183608001518460c00151955095509550955095505091939590929450565b8060016000848152602001908152602001600020600701819055505050565b611df6612a66565b6000548160000181815250508981602001818152505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525084816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838160a001818152505082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160c00181905250600081610100019015159081151581525050600060016000540390505b60008110611fab578a60016000838152602001908152602001600020600101541415611f9d5760016000828152602001908152602001600020600701548260a0018181525050611fab565b808060019003915050611f52565b5080600160008054815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611ff19291906129a3565b50606082015181600301908051906020019061200e9291906129a3565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c082015181600601908051906020019061207c9291906129a3565b5060e082015181600701556101008201518160080160006101000a81548160ff02191690831515021790555090505060016000540160008190555050505050505050505050565b6120cb612a31565b600180600085815260200190815260200160002060080160006101000a81548160ff02191690831515021790555060016000848152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121c55780601f1061219a576101008083540402835291602001916121c5565b820191906000526020600020905b8154815290600101906020018083116121a857829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122675780601f1061223c57610100808354040283529160200191612267565b820191906000526020600020905b81548152906001019060200180831161224a57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123695780601f1061233e57610100808354040283529160200191612369565b820191906000526020600020905b81548152906001019060200180831161234c57829003601f168201915b50505050508152602001600782015481526020016008820160009054906101000a900460ff161515151581525050816000018190525082816020018181525050600260008481526020019081526020016000208054905081604001818152505060035481606001818152505081816080018181525050806004600083606001518152602001908152602001600020600082015181600001600082015181600001556020820151816001015560408201518160020190805190602001906124309291906129a3565b50606082015181600301908051906020019061244d9291906129a3565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005015560c08201518160060190805190602001906124bb9291906129a3565b5060e082015181600701556101008201518160080160006101000a81548160ff021916908315150217905550505060208201518160090155604082015181600a0155606082015181600b0155608082015181600c0155905050505050565b80600460006003548152602001908152602001600020600c01819055508060038190555050565b600080600061254d612a66565b60016000868152602001908152602001600020604051806101200160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126195780601f106125ee57610100808354040283529160200191612619565b820191906000526020600020905b8154815290600101906020018083116125fc57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156126bb5780601f10612690576101008083540402835291602001916126bb565b820191906000526020600020905b81548152906001019060200180831161269e57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160058201548152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127bd5780601f10612792576101008083540402835291602001916127bd565b820191906000526020600020905b8154815290600101906020018083116127a057829003601f168201915b50505050508152602001600782015481526020016008820160009054906101000a900460ff16151515158152505090508060a001518160e00151826101000151935093509350509193909250565b60008060005b6002600086815260200190815260200160002080549050811015612948578373ffffffffffffffffffffffffffffffffffffffff1660026000878152602001908152602001600020828154811061286457fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561293b576002600086815260200190815260200160002081815481106128d057fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060026000868152602001908152602001600020818154811061292257fe5b9060005260206000209060070201600601549150612948565b8080600101915050612811565b509250929050565b6040518060e0016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826129d95760008555612a20565b82601f106129f257805160ff1916838001178555612a20565b82800160010185558215612a20579182015b82811115612a1f578251825591602001919060010190612a04565b5b509050612a2d9190612aca565b5090565b6040518060a00160405280612a44612a66565b8152602001600081526020016000815260200160008152602001600081525090565b60405180610120016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160608152602001600081526020016000151581525090565b5b80821115612ae3576000816000905550600101612acb565b5090565b600081359050612af68161339a565b92915050565b60008083601f840112612b0e57600080fd5b8235905067ffffffffffffffff811115612b2757600080fd5b602083019150836001820283011115612b3f57600080fd5b9250929050565b600081359050612b55816133b1565b92915050565b600060208284031215612b6d57600080fd5b6000612b7b84828501612b46565b91505092915050565b60008060408385031215612b9757600080fd5b6000612ba585828601612b46565b9250506020612bb685828601612ae7565b9150509250929050565b600080600080600080600080600060c08a8c031215612bde57600080fd5b6000612bec8c828d01612b46565b99505060208a013567ffffffffffffffff811115612c0957600080fd5b612c158c828d01612afc565b985098505060408a013567ffffffffffffffff811115612c3457600080fd5b612c408c828d01612afc565b96509650506060612c538c828d01612ae7565b9450506080612c648c828d01612b46565b93505060a08a013567ffffffffffffffff811115612c8157600080fd5b612c8d8c828d01612afc565b92509250509295985092959850929598565b60008060408385031215612cb257600080fd5b6000612cc085828601612b46565b9250506020612cd185828601612b46565b9150509250929050565b60008060008060008060008060008060e08b8d031215612cfa57600080fd5b6000612d088d828e01612b46565b9a50506020612d198d828e01612b46565b99505060408b013567ffffffffffffffff811115612d3657600080fd5b612d428d828e01612afc565b985098505060608b013567ffffffffffffffff811115612d6157600080fd5b612d6d8d828e01612afc565b96509650506080612d808d828e01612ae7565b94505060a08b013567ffffffffffffffff811115612d9d57600080fd5b612da98d828e01612afc565b935093505060c0612dbc8d828e01612b46565b9150509295989b9194979a5092959850565b6000612dda8383612e12565b60208301905092915050565b6000612df28383612f70565b905092915050565b6000612e068383612fe2565b60208301905092915050565b612e1b8161330e565b82525050565b612e2a8161330e565b82525050565b6000612e3b82613266565b612e4581856132b9565b9350612e5083613236565b8060005b83811015612e81578151612e688882612dce565b9750612e7383613292565b925050600181019050612e54565b5085935050505092915050565b6000612e9982613271565b612ea381856132ca565b935083602082028501612eb585613246565b8060005b85811015612ef15784840389528151612ed28582612de6565b9450612edd8361329f565b925060208a01995050600181019050612eb9565b50829750879550505050505092915050565b6000612f0e8261327c565b612f1881856132db565b9350612f2383613256565b8060005b83811015612f54578151612f3b8882612dfa565b9750612f46836132ac565b925050600181019050612f27565b5085935050505092915050565b612f6a81613320565b82525050565b6000612f7b82613287565b612f8581856132ec565b9350612f95818560208601613356565b612f9e81613389565b840191505092915050565b6000612fb482613287565b612fbe81856132fd565b9350612fce818560208601613356565b612fd781613389565b840191505092915050565b612feb8161334c565b82525050565b612ffa8161334c565b82525050565b60006040820190506130156000830185612e21565b6130226020830184612ff1565b9392505050565b600060808201905081810360008301526130438187612e30565b905081810360208301526130578186612e8e565b9050818103604083015261306b8185612e8e565b9050818103606083015261307f8184612e8e565b905095945050505050565b600060808201905081810360008301526130a48187612f03565b905081810360208301526130b88186612e8e565b905081810360408301526130cc8185612e8e565b905081810360608301526130e08184612e8e565b905095945050505050565b60006040820190506131006000830185612f61565b61310d6020830184612ff1565b9392505050565b600060a0820190506131296000830188612ff1565b818103602083015261313b8187612fa9565b9050818103604083015261314f8186612fa9565b905061315e6060830185612e21565b81810360808301526131708184612fa9565b90509695505050505050565b60006080820190506131916000830187612ff1565b81810360208301526131a38186612fa9565b905081810360408301526131b78185612fa9565b905081810360608301526131cb8184612fa9565b905095945050505050565b60006040820190506131eb6000830185612ff1565b6131f86020830184612ff1565b9392505050565b60006060820190506132146000830186612ff1565b6132216020830185612ff1565b61322e6040830184612f61565b949350505050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006133198261332c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015613374578082015181840152602081019050613359565b83811115613383576000848401525b50505050565b6000601f19601f8301169050919050565b6133a38161330e565b81146133ae57600080fd5b50565b6133ba8161334c565b81146133c557600080fd5b5056fea264697066735822122027339091e5f6e56174a64f6a49ca6281f42e9cffc9ebb5088edc0a3f1cd3b44d64736f6c63430007040033";

    public static final String FUNC_ADDRESPONSE = "addResponse";

    public static final String FUNC_CREATEREQUEST = "createRequest";

    public static final String FUNC_GETREQUESTSIGNEDHX = "getRequestSignedHx";

    public static final String FUNC_GETREQUESTSTATUS = "getRequestStatus";

    public static final String FUNC_GETREQUESTSBYSHIPMENTID = "getRequestsByShipmentId";

    public static final String FUNC_GETRESPONSEBYREQUESTID = "getResponseByRequestId";

    public static final String FUNC_GETRESPONSESIGNEDHX = "getResponseSignedHx";

    public static final String FUNC_LOADREQUESTDETAILS = "loadRequestDetails";

    public static final String FUNC_LOADRESPONSEDETAILS = "loadResponseDetails";

    public static final String FUNC_SETLATESTBLOCKHX = "setLatestBlockHx";

    public static final String FUNC_SETREQUESTSIGNEDHX = "setRequestSignedHx";

    public static final String FUNC_SUBMITBLOCK = "submitBlock";

    public static final String FUNC_VERIFYBLOCKS = "verifyBlocks";

    @Deprecated
    protected ProofOfLocation(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProofOfLocation(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProofOfLocation(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProofOfLocation(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addResponse(BigInteger requestId, BigInteger shipmentId, String witnessLat, String witnessLng, String witnessAddr, String timestamp, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_ADDRESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(witnessLat), 
                new org.web3j.abi.datatypes.Utf8String(witnessLng), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr), 
                new org.web3j.abi.datatypes.Utf8String(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createRequest(BigInteger shipmentId, String sellerLat, String sellerLng, String sellerAddr, BigInteger preHx, String timestamp) {
        final Function function = new Function(
                FUNC_CREATEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(sellerLat), 
                new org.web3j.abi.datatypes.Utf8String(sellerLng), 
                new org.web3j.abi.datatypes.Address(160, sellerAddr), 
                new org.web3j.abi.datatypes.generated.Uint256(preHx), 
                new org.web3j.abi.datatypes.Utf8String(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> getRequestSignedHx(BigInteger requestId) {
        final Function function = new Function(FUNC_GETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> getRequestStatus(BigInteger requestId) {
        final Function function = new Function(FUNC_GETREQUESTSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>> getRequestsByShipmentId(BigInteger shipmentId) {
        final Function function = new Function(FUNC_GETREQUESTSBYSHIPMENTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(shipmentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>> getResponseByRequestId(BigInteger requestId) {
        final Function function = new Function(FUNC_GETRESPONSEBYREQUESTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<String>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<String>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<String>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getResponseSignedHx(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_GETRESPONSESIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, String, String, String, String>> loadRequestDetails(BigInteger requestId) {
        final Function function = new Function(FUNC_LOADREQUESTDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, String, String, String, String>>(function,
                new Callable<Tuple5<BigInteger, String, String, String, String>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, String, String, String>> loadResponseDetails(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_LOADRESPONSEDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, String, String, String>>(function,
                new Callable<Tuple4<BigInteger, String, String, String>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setLatestBlockHx(BigInteger hx) {
        final Function function = new Function(
                FUNC_SETLATESTBLOCKHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(hx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRequestSignedHx(BigInteger requestId, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_SETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitBlock(BigInteger requestId, BigInteger hx) {
        final Function function = new Function(
                FUNC_SUBMITBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(hx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<Boolean, BigInteger>> verifyBlocks(BigInteger blockHx, BigInteger totalCount) {
        final Function function = new Function(FUNC_VERIFYBLOCKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockHx), 
                new org.web3j.abi.datatypes.generated.Uint256(totalCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<Boolean, BigInteger>>(function,
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    @Deprecated
    public static ProofOfLocation load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLocation(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProofOfLocation load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLocation(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProofOfLocation load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProofOfLocation(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProofOfLocation load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProofOfLocation(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfLocation.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfLocation.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfLocation.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfLocation.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
