package cityu.cs.fyp.java_ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ProofOfLocation extends Contract {
    public static final String BINARY = "60806040526000805534801561001457600080fd5b5061323c806100246000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635ea8ee6c116100715780635ea8ee6c1461017b57806363b492bd146101ae578063776da226146101e15780638827403614610215578063afc55cc214610231578063d9854be31461024d576100a9565b80630a237027146100ae57806325eef7ee146100ca5780635186d4c6146100fb578063558498a21461012e5780635cd4af541461015f575b600080fd5b6100c860048036038101906100c39190612b49565b61027e565b005b6100e460048036038101906100df9190612b0d565b6104cb565b6040516100f2929190612f59565b60405180910390f35b610115600480360381019061011091906129ac565b610c1b565b6040516101259493929190612e97565b60405180910390f35b610148600480360381019061014391906129ac565b611135565b604051610156929190612f82565b60405180910390f35b61017960048036038101906101749190612a11565b611472565b005b610195600480360381019061019091906129d5565b611706565b6040516101a5949392919061301a565b60405180910390f35b6101c860048036038101906101c391906129ac565b611a5d565b6040516101d89493929190612ef8565b60405180910390f35b6101fb60048036038101906101f691906129ac565b611e75565b60405161020c959493929190612fb2565b60405180910390f35b61022f600480360381019061022a9190612b0d565b6121d0565b005b61024b60048036038101906102469190612b0d565b6121ef565b005b610267600480360381019061026291906129d5565b61266c565b604051610275929190612e6e565b60405180910390f35b6102866127b1565b8a8160000181815250508981602001818152505088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525084816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a00181905250818160c0018181525050600260008c815260200190815260200160002081908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000155602082015181600101556040820151816002019080519060200190610430929190612804565b50606082015181600301908051906020019061044d929190612804565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906104b1929190612804565b5060c0820151816006015550505050505050505050505050565b6000806000600190506104dc612892565b6003600087815260200190815260200160002060405180608001604052908160008201604051806101000160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105b85780601f1061058d576101008083540402835291602001916105b8565b820191906000526020600020905b81548152906001019060200180831161059b57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107525780601f1061072757610100808354040283529160200191610752565b820191906000526020600020905b81548152906001019060200180831161073557829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b5050505050815260200160078201548152505081526020016008820154815260200160098201548152602001600a820154815250509050600081606001519050600082600001516020015190506000600190505b87811080156108545750845b15610c0957610861612892565b6003600085815260200190815260200160002060405180608001604052908160008201604051806101000160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093d5780601f106109125761010080835404028352916020019161093d565b820191906000526020600020905b81548152906001019060200180831161092057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109df5780601f106109b4576101008083540402835291602001916109df565b820191906000526020600020905b8154815290600101906020018083116109c257829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b795780601f10610b4e57610100808354040283529160200191610b79565b820191906000526020600020905b815481529060010190602001808311610b5c57829003601f168201915b5050505050815260200160078201548152505081526020016008820154815260200160098201548152602001600a82015481525050905080606001519350828160000151602001511415610bd05760009550610bdc565b80600001516020015192505b806000015160000151816020015114610bf457600095505b8515610c035781806001019250505b50610848565b84839650965050505050509250929050565b606080606080600060026000878152602001908152602001600020805490501115610dcc57600260008681526020019081526020016000208054905067ffffffffffffffff81118015610c6d57600080fd5b50604051908082528060200260200182016040528015610c9c5781602001602082028036833780820191505090505b509350600260008681526020019081526020016000208054905067ffffffffffffffff81118015610ccc57600080fd5b50604051908082528060200260200182016040528015610d0057816020015b6060815260200190600190039081610ceb5790505b509250600260008681526020019081526020016000208054905067ffffffffffffffff81118015610d3057600080fd5b50604051908082528060200260200182016040528015610d6457816020015b6060815260200190600190039081610d4f5790505b509150600260008681526020019081526020016000208054905067ffffffffffffffff81118015610d9457600080fd5b50604051908082528060200260200182016040528015610dc857816020015b6060815260200190600190039081610db35790505b5090505b60005b600260008781526020019081526020016000208054905081101561112d57600260008781526020019081526020016000208181548110610e0b57fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858281518110610e4957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008781526020019081526020016000208181548110610ea157fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f465780601f10610f1b57610100808354040283529160200191610f46565b820191906000526020600020905b815481529060010190602001808311610f2957829003601f168201915b5050505050848281518110610f5757fe5b6020026020010181905250600260008781526020019081526020016000208181548110610f8057fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110255780601f10610ffa57610100808354040283529160200191611025565b820191906000526020600020905b81548152906001019060200180831161100857829003601f168201915b505050505083828151811061103657fe5b602002602001018190525060026000878152602001908152602001600020818154811061105f57fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111045780601f106110d957610100808354040283529160200191611104565b820191906000526020600020905b8154815290600101906020018083116110e757829003601f168201915b505050505082828151811061111557fe5b60200260200101819052508080600101915050610dcf565b509193509193565b606060006111416128c0565b60016000858152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561120d5780601f106111e25761010080835404028352916020019161120d565b820191906000526020600020905b8154815290600101906020018083116111f057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112af5780601f10611284576101008083540402835291602001916112af565b820191906000526020600020905b81548152906001019060200180831161129257829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113a75780601f1061137c576101008083540402835291602001916113a7565b820191906000526020600020905b81548152906001019060200180831161138a57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114495780601f1061141e57610100808354040283529160200191611449565b820191906000526020600020905b81548152906001019060200180831161142c57829003601f168201915b5050505050815260200160078201548152505090508060a001518160e001519250925050915091565b61147a6128c0565b6000548160000181815250508a81602001818152505089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525085816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a0018190525082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160c0018190525080600160008054815260200190815260200160002060008201518160000155602082015181600101556040820151816002019080519060200190611641929190612804565b50606082015181600301908051906020019061165e929190612804565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050190805190602001906116c2929190612804565b5060c08201518160060190805190602001906116df929190612804565b5060e082015181600701559050506001600054016000819055505050505050505050505050565b6000606080606060005b6002600088815260200190815260200160002080549050811015611a53578573ffffffffffffffffffffffffffffffffffffffff1660026000898152602001908152602001600020828154811061176357fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611a46576002600088815260200190815260200160002081815481106117cf57fe5b906000526020600020906007020160010154945060026000888152602001908152602001600020818154811061180157fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118a65780601f1061187b576101008083540402835291602001916118a6565b820191906000526020600020905b81548152906001019060200180831161188957829003601f168201915b505050505093506002600088815260200190815260200160002081815481106118cb57fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119705780601f1061194557610100808354040283529160200191611970565b820191906000526020600020905b81548152906001019060200180831161195357829003601f168201915b5050505050925060026000888152602001908152602001600020818154811061199557fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a3a5780601f10611a0f57610100808354040283529160200191611a3a565b820191906000526020600020905b815481529060010190602001808311611a1d57829003601f168201915b50505050509150611a53565b8080600101915050611710565b5092959194509250565b606080606080600080541115611e6e5760005467ffffffffffffffff81118015611a8657600080fd5b50604051908082528060200260200182016040528015611ab55781602001602082028036833780820191505090505b50935060005467ffffffffffffffff81118015611ad157600080fd5b50604051908082528060200260200182016040528015611b0557816020015b6060815260200190600190039081611af05790505b50925060005467ffffffffffffffff81118015611b2157600080fd5b50604051908082528060200260200182016040528015611b5557816020015b6060815260200190600190039081611b405790505b50915060005467ffffffffffffffff81118015611b7157600080fd5b50604051908082528060200260200182016040528015611ba557816020015b6060815260200190600190039081611b905790505b5090506000805b600054811015611e6b578660016000838152602001908152602001600020600101541415611e5e576001600082815260200190815260200160002060000154868381518110611bf757fe5b602002602001018181525050600160008281526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cad5780601f10611c8257610100808354040283529160200191611cad565b820191906000526020600020905b815481529060010190602001808311611c9057829003601f168201915b5050505050858381518110611cbe57fe5b6020026020010181905250600160008281526020019081526020016000206003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d735780601f10611d4857610100808354040283529160200191611d73565b820191906000526020600020905b815481529060010190602001808311611d5657829003601f168201915b5050505050848381518110611d8457fe5b6020026020010181905250600160008281526020019081526020016000206006018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e395780601f10611e0e57610100808354040283529160200191611e39565b820191906000526020600020905b815481529060010190602001808311611e1c57829003601f168201915b5050505050838381518110611e4a57fe5b602002602001018190525081806001019250505b8080600101915050611bac565b50505b9193509193565b600060608060006060611e866128c0565b60016000888152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f525780601f10611f2757610100808354040283529160200191611f52565b820191906000526020600020905b815481529060010190602001808311611f3557829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ff45780601f10611fc957610100808354040283529160200191611ff4565b820191906000526020600020905b815481529060010190602001808311611fd757829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120ec5780601f106120c1576101008083540402835291602001916120ec565b820191906000526020600020905b8154815290600101906020018083116120cf57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561218e5780601f106121635761010080835404028352916020019161218e565b820191906000526020600020905b81548152906001019060200180831161217157829003601f168201915b50505050508152602001600782015481525050905080602001518160400151826060015183608001518460c00151955095509550955095505091939590929450565b8060016000848152602001908152602001600020600701819055505050565b6121f7612892565b60016000848152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122c35780601f10612298576101008083540402835291602001916122c3565b820191906000526020600020905b8154815290600101906020018083116122a657829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123655780601f1061233a57610100808354040283529160200191612365565b820191906000526020600020905b81548152906001019060200180831161234857829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561245d5780601f106124325761010080835404028352916020019161245d565b820191906000526020600020905b81548152906001019060200180831161244057829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124ff5780601f106124d4576101008083540402835291602001916124ff565b820191906000526020600020905b8154815290600101906020018083116124e257829003601f168201915b5050505050815260200160078201548152505081600001819052508281602001818152505060026000848152602001908152602001600020805490508160400181815250508181606001818152505080600360008481526020019081526020016000206000820151816000016000820151816000015560208201518160010155604082015181600201908051906020019061259b929190612804565b5060608201518160030190805190602001906125b8929190612804565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600501908051906020019061261c929190612804565b5060c0820151816006019080519060200190612639929190612804565b5060e0820151816007015550506020820151816008015560408201518160090155606082015181600a0155905050505050565b60008060005b60026000868152602001908152602001600020805490508110156127a9578373ffffffffffffffffffffffffffffffffffffffff166002600087815260200190815260200160002082815481106126c557fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561279c5760026000868152602001908152602001600020818154811061273157fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925060026000868152602001908152602001600020818154811061278357fe5b90600052602060002090600702016006015491506127a9565b8080600101915050612672565b509250929050565b6040518060e0016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261283a5760008555612881565b82601f1061285357805160ff1916838001178555612881565b82800160010185558215612881579182015b82811115612880578251825591602001919060010190612865565b5b50905061288e919061291b565b5090565b60405180608001604052806128a56128c0565b81526020016000815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b5b8082111561293457600081600090555060010161291c565b5090565b600081359050612947816131d8565b92915050565b60008083601f84011261295f57600080fd5b8235905067ffffffffffffffff81111561297857600080fd5b60208301915083600182028301111561299057600080fd5b9250929050565b6000813590506129a6816131ef565b92915050565b6000602082840312156129be57600080fd5b60006129cc84828501612997565b91505092915050565b600080604083850312156129e857600080fd5b60006129f685828601612997565b9250506020612a0785828601612938565b9150509250929050565b60008060008060008060008060008060c08b8d031215612a3057600080fd5b6000612a3e8d828e01612997565b9a505060208b013567ffffffffffffffff811115612a5b57600080fd5b612a678d828e0161294d565b995099505060408b013567ffffffffffffffff811115612a8657600080fd5b612a928d828e0161294d565b97509750506060612aa58d828e01612938565b95505060808b013567ffffffffffffffff811115612ac257600080fd5b612ace8d828e0161294d565b945094505060a08b013567ffffffffffffffff811115612aed57600080fd5b612af98d828e0161294d565b92509250509295989b9194979a5092959850565b60008060408385031215612b2057600080fd5b6000612b2e85828601612997565b9250506020612b3f85828601612997565b9150509250929050565b60008060008060008060008060008060e08b8d031215612b6857600080fd5b6000612b768d828e01612997565b9a50506020612b878d828e01612997565b99505060408b013567ffffffffffffffff811115612ba457600080fd5b612bb08d828e0161294d565b985098505060608b013567ffffffffffffffff811115612bcf57600080fd5b612bdb8d828e0161294d565b96509650506080612bee8d828e01612938565b94505060a08b013567ffffffffffffffff811115612c0b57600080fd5b612c178d828e0161294d565b935093505060c0612c2a8d828e01612997565b9150509295989b9194979a5092959850565b6000612c488383612c80565b60208301905092915050565b6000612c608383612dde565b905092915050565b6000612c748383612e50565b60208301905092915050565b612c898161314c565b82525050565b612c988161314c565b82525050565b6000612ca9826130a4565b612cb381856130f7565b9350612cbe83613074565b8060005b83811015612cef578151612cd68882612c3c565b9750612ce1836130d0565b925050600181019050612cc2565b5085935050505092915050565b6000612d07826130af565b612d118185613108565b935083602082028501612d2385613084565b8060005b85811015612d5f5784840389528151612d408582612c54565b9450612d4b836130dd565b925060208a01995050600181019050612d27565b50829750879550505050505092915050565b6000612d7c826130ba565b612d868185613119565b9350612d9183613094565b8060005b83811015612dc2578151612da98882612c68565b9750612db4836130ea565b925050600181019050612d95565b5085935050505092915050565b612dd88161315e565b82525050565b6000612de9826130c5565b612df3818561312a565b9350612e03818560208601613194565b612e0c816131c7565b840191505092915050565b6000612e22826130c5565b612e2c818561313b565b9350612e3c818560208601613194565b612e45816131c7565b840191505092915050565b612e598161318a565b82525050565b612e688161318a565b82525050565b6000604082019050612e836000830185612c8f565b612e906020830184612e5f565b9392505050565b60006080820190508181036000830152612eb18187612c9e565b90508181036020830152612ec58186612cfc565b90508181036040830152612ed98185612cfc565b90508181036060830152612eed8184612cfc565b905095945050505050565b60006080820190508181036000830152612f128187612d71565b90508181036020830152612f268186612cfc565b90508181036040830152612f3a8185612cfc565b90508181036060830152612f4e8184612cfc565b905095945050505050565b6000604082019050612f6e6000830185612dcf565b612f7b6020830184612e5f565b9392505050565b60006040820190508181036000830152612f9c8185612e17565b9050612fab6020830184612e5f565b9392505050565b600060a082019050612fc76000830188612e5f565b8181036020830152612fd98187612e17565b90508181036040830152612fed8186612e17565b9050612ffc6060830185612c8f565b818103608083015261300e8184612e17565b90509695505050505050565b600060808201905061302f6000830187612e5f565b81810360208301526130418186612e17565b905081810360408301526130558185612e17565b905081810360608301526130698184612e17565b905095945050505050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006131578261316a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156131b2578082015181840152602081019050613197565b838111156131c1576000848401525b50505050565b6000601f19601f8301169050919050565b6131e18161314c565b81146131ec57600080fd5b50565b6131f88161318a565b811461320357600080fd5b5056fea26469706673582212203f5d2fc225dd10e19b3e09796b493c3212b96e34a6641e64acbf13e0f6f3638164736f6c63430007040033";

    public static final String FUNC_ADDRESPONSE = "addResponse";

    public static final String FUNC_CREATEREQUEST = "createRequest";

    public static final String FUNC_GETREQUESTSIGNEDHX = "getRequestSignedHx";

    public static final String FUNC_GETREQUESTSBYSHIPMENTID = "getRequestsByShipmentId";

    public static final String FUNC_GETRESPONSEBYREQUESTID = "getResponseByRequestId";

    public static final String FUNC_GETRESPONSESIGNEDHX = "getResponseSignedHx";

    public static final String FUNC_LOADREQUESTDETAILS = "loadRequestDetails";

    public static final String FUNC_LOADRESPONSEDETAILS = "loadResponseDetails";

    public static final String FUNC_SETREQUESTSIGNEDHX = "setRequestSignedHx";

    public static final String FUNC_SUBMITBLOCK = "submitBlock";

    public static final String FUNC_VERIFYBLOCKS = "verifyBlocks";

    @Deprecated
    protected ProofOfLocation(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProofOfLocation(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProofOfLocation(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProofOfLocation(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addResponse(BigInteger requestId, BigInteger shipmentId, String witnessLat, String witnessLng, String witnessAddr, String timestamp, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_ADDRESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(witnessLat), 
                new org.web3j.abi.datatypes.Utf8String(witnessLng), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr), 
                new org.web3j.abi.datatypes.Utf8String(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createRequest(BigInteger shipmentId, String sellerLat, String sellerLng, String sellerAddr, String preHx, String timestamp) {
        final Function function = new Function(
                FUNC_CREATEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(sellerLat), 
                new org.web3j.abi.datatypes.Utf8String(sellerLng), 
                new org.web3j.abi.datatypes.Address(160, sellerAddr), 
                new org.web3j.abi.datatypes.Utf8String(preHx), 
                new org.web3j.abi.datatypes.Utf8String(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getRequestSignedHx(BigInteger requestId) {
        final Function function = new Function(FUNC_GETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>> getRequestsByShipmentId(BigInteger shipmentId) {
        final Function function = new Function(FUNC_GETREQUESTSBYSHIPMENTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(shipmentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>> getResponseByRequestId(BigInteger requestId) {
        final Function function = new Function(FUNC_GETRESPONSEBYREQUESTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<String>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<String>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<String>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getResponseSignedHx(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_GETRESPONSESIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, String, String, String, String>> loadRequestDetails(BigInteger requestId) {
        final Function function = new Function(FUNC_LOADREQUESTDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, String, String, String, String>>(function,
                new Callable<Tuple5<BigInteger, String, String, String, String>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<BigInteger, String, String, String>> loadResponseDetails(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_LOADRESPONSEDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, String, String, String>>(function,
                new Callable<Tuple4<BigInteger, String, String, String>>() {
                    @Override
                    public Tuple4<BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setRequestSignedHx(BigInteger requestId, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_SETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitBlock(BigInteger requestId, BigInteger preBlockHx) {
        final Function function = new Function(
                FUNC_SUBMITBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(preBlockHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<Boolean, BigInteger>> verifyBlocks(BigInteger blockHx, BigInteger totalCount) {
        final Function function = new Function(FUNC_VERIFYBLOCKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockHx), 
                new org.web3j.abi.datatypes.generated.Uint256(totalCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<Boolean, BigInteger>>(function,
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    @Deprecated
    public static ProofOfLocation load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLocation(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProofOfLocation load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLocation(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProofOfLocation load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProofOfLocation(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProofOfLocation load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProofOfLocation(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfLocation.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfLocation.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfLocation.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfLocation.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
