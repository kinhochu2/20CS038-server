package cityu.cs.fyp.java_ethereum;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ProofOfLocation extends Contract {
    public static final String BINARY = "60806040526000805534801561001457600080fd5b50613a34806100246000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638710a3e0116100715780638710a3e0146101d1578063882740361461020457806395c93b2614610220578063afc55cc21461023c578063bed34bba14610258578063d9854be314610288576100b4565b806314951051146100b957806325eef7ee146100d55780635186d4c614610106578063558498a2146101395780635ea8ee6c1461016a578063776da2261461019d575b600080fd5b6100d360048036038101906100ce9190613010565b6102b9565b005b6100ef60048036038101906100ea919061330a565b6105a4565b6040516100fd9291906136c6565b60405180910390f35b610120600480360381019061011b9190613195565b610e1f565b60405161013094939291906135e9565b60405180910390f35b610153600480360381019061014e9190613195565b611339565b6040516101619291906137bf565b60405180910390f35b610184600480360381019061017f91906131be565b611707565b604051610194949392919061375e565b60405180910390f35b6101b760048036038101906101b29190613195565b611af5565b6040516101c89594939291906136ef565b60405180910390f35b6101eb60048036038101906101e69190612fcb565b611ee2565b6040516101fb949392919061364a565b60405180910390f35b61021e6004803603810190610219919061330a565b6123df565b005b61023a600480360381019061023591906131fa565b6123fe565b005b6102566004803603810190610251919061330a565b6126a2565b005b610272600480360381019061026d9190613129565b612bca565b60405161027f91906136ab565b60405180910390f35b6102a2600480360381019061029d91906131be565b612c23565b6040516102b09291906135c0565b60405180910390f35b6102c1612d68565b6000548160000181815250508b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525085816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a0018190525082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160c001819052508060016000805481526020019081526020016000206000820151816000015560208201518160010190805190602001906104c1929190612dc3565b5060408201518160020190805190602001906104de929190612dc3565b5060608201518160030190805190602001906104fb929190612dc3565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a082015181600501908051906020019061055f929190612dc3565b5060c082015181600601908051906020019061057c929190612dc3565b5060e08201518160070155905050600160005401600081905550505050505050505050505050565b600080600060019050600060036000878152602001908152602001600020604051806080016040529081600082016040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106815780601f1061065657610100808354040283529160200191610681565b820191906000526020600020905b81548152906001019060200180831161066457829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108bd5780601f10610892576101008083540402835291602001916108bd565b820191906000526020600020905b8154815290600101906020018083116108a057829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b5050505050815260200160078201548152505081526020016008820154815260200160098201548152602001600a820154815250509050600081606001519050600082600001516020015190506000600190505b87811080156109bf5750845b15610e0d57600060036000858152602001908152602001600020604051806080016040529081600082016040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a985780601f10610a6d57610100808354040283529160200191610a98565b820191906000526020600020905b815481529060010190602001808311610a7b57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b3a5780601f10610b0f57610100808354040283529160200191610b3a565b820191906000526020600020905b815481529060010190602001808311610b1d57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bdc5780601f10610bb157610100808354040283529160200191610bdc565b820191906000526020600020905b815481529060010190602001808311610bbf57829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cd45780601f10610ca957610100808354040283529160200191610cd4565b820191906000526020600020905b815481529060010190602001808311610cb757829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d765780601f10610d4b57610100808354040283529160200191610d76565b820191906000526020600020905b815481529060010190602001808311610d5957829003601f168201915b5050505050815260200160078201548152505081526020016008820154815260200160098201548152602001600a82015481525050905080606001519350610dc681600001516020015184612bca565b15610dd45760009550610de0565b80600001516020015192505b806000015160000151816020015114610df857600095505b8515610e075781806001019250505b506109b3565b84839650965050505050509250929050565b606080606080600060026000878152602001908152602001600020805490501115610fd057600260008681526020019081526020016000208054905067ffffffffffffffff81118015610e7157600080fd5b50604051908082528060200260200182016040528015610ea05781602001602082028036833780820191505090505b509350600260008681526020019081526020016000208054905067ffffffffffffffff81118015610ed057600080fd5b50604051908082528060200260200182016040528015610f0457816020015b6060815260200190600190039081610eef5790505b509250600260008681526020019081526020016000208054905067ffffffffffffffff81118015610f3457600080fd5b50604051908082528060200260200182016040528015610f6857816020015b6060815260200190600190039081610f535790505b509150600260008681526020019081526020016000208054905067ffffffffffffffff81118015610f9857600080fd5b50604051908082528060200260200182016040528015610fcc57816020015b6060815260200190600190039081610fb75790505b5090505b60005b60026000878152602001908152602001600020805490508110156113315760026000878152602001908152602001600020818154811061100f57fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685828151811061104d57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506002600087815260200190815260200160002081815481106110a557fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561114a5780601f1061111f5761010080835404028352916020019161114a565b820191906000526020600020905b81548152906001019060200180831161112d57829003601f168201915b505050505084828151811061115b57fe5b602002602001018190525060026000878152602001908152602001600020818154811061118457fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112295780601f106111fe57610100808354040283529160200191611229565b820191906000526020600020905b81548152906001019060200180831161120c57829003601f168201915b505050505083828151811061123a57fe5b602002602001018190525060026000878152602001908152602001600020818154811061126357fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113085780601f106112dd57610100808354040283529160200191611308565b820191906000526020600020905b8154815290600101906020018083116112eb57829003601f168201915b505050505082828151811061131957fe5b60200260200101819052508080600101915050610fd3565b509193509193565b6060600080600160008581526020019081526020016000206040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114005780601f106113d557610100808354040283529160200191611400565b820191906000526020600020905b8154815290600101906020018083116113e357829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114a25780601f10611477576101008083540402835291602001916114a2565b820191906000526020600020905b81548152906001019060200180831161148557829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115445780601f1061151957610100808354040283529160200191611544565b820191906000526020600020905b81548152906001019060200180831161152757829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561163c5780601f106116115761010080835404028352916020019161163c565b820191906000526020600020905b81548152906001019060200180831161161f57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116de5780601f106116b3576101008083540402835291602001916116de565b820191906000526020600020905b8154815290600101906020018083116116c157829003601f168201915b5050505050815260200160078201548152505090508060a001518160e001519250925050915091565b60608060608060005b6002600088815260200190815260200160002080549050811015611aeb578573ffffffffffffffffffffffffffffffffffffffff1660026000898152602001908152602001600020828154811061176357fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ade576002600088815260200190815260200160002081815481106117cf57fe5b90600052602060002090600702016001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118745780601f1061184957610100808354040283529160200191611874565b820191906000526020600020905b81548152906001019060200180831161185757829003601f168201915b5050505050945060026000888152602001908152602001600020818154811061189957fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561193e5780601f106119135761010080835404028352916020019161193e565b820191906000526020600020905b81548152906001019060200180831161192157829003601f168201915b5050505050935060026000888152602001908152602001600020818154811061196357fe5b90600052602060002090600702016003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a085780601f106119dd57610100808354040283529160200191611a08565b820191906000526020600020905b8154815290600101906020018083116119eb57829003601f168201915b50505050509250600260008881526020019081526020016000208181548110611a2d57fe5b90600052602060002090600702016005018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ad25780601f10611aa757610100808354040283529160200191611ad2565b820191906000526020600020905b815481529060010190602001808311611ab557829003601f168201915b50505050509150611aeb565b8080600101915050611710565b5092959194509250565b6060806060600060606000600160008881526020019081526020016000206040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bc25780601f10611b9757610100808354040283529160200191611bc2565b820191906000526020600020905b815481529060010190602001808311611ba557829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c645780601f10611c3957610100808354040283529160200191611c64565b820191906000526020600020905b815481529060010190602001808311611c4757829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d065780601f10611cdb57610100808354040283529160200191611d06565b820191906000526020600020905b815481529060010190602001808311611ce957829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dfe5780601f10611dd357610100808354040283529160200191611dfe565b820191906000526020600020905b815481529060010190602001808311611de157829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ea05780601f10611e7557610100808354040283529160200191611ea0565b820191906000526020600020905b815481529060010190602001808311611e8357829003601f168201915b50505050508152602001600782015481525050905080602001518160400151826060015183608001518460c00151955095509550955095505091939590929450565b6060806060806000805411156123d65760005467ffffffffffffffff81118015611f0b57600080fd5b50604051908082528060200260200182016040528015611f3a5781602001602082028036833780820191505090505b50935060005467ffffffffffffffff81118015611f5657600080fd5b50604051908082528060200260200182016040528015611f8a57816020015b6060815260200190600190039081611f755790505b50925060005467ffffffffffffffff81118015611fa657600080fd5b50604051908082528060200260200182016040528015611fda57816020015b6060815260200190600190039081611fc55790505b50915060005467ffffffffffffffff81118015611ff657600080fd5b5060405190808252806020026020018201604052801561202a57816020015b60608152602001906001900390816120155790505b5090506000805b6000548110156123d357612137600160008381526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120e85780601f106120bd576101008083540402835291602001916120e8565b820191906000526020600020905b8154815290600101906020018083116120cb57829003601f168201915b505050505089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612bca565b156123c657600160008281526020019081526020016000206000015486838151811061215f57fe5b602002602001018181525050600160008281526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122155780601f106121ea57610100808354040283529160200191612215565b820191906000526020600020905b8154815290600101906020018083116121f857829003601f168201915b505050505085838151811061222657fe5b6020026020010181905250600160008281526020019081526020016000206003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122db5780601f106122b0576101008083540402835291602001916122db565b820191906000526020600020905b8154815290600101906020018083116122be57829003601f168201915b50505050508483815181106122ec57fe5b6020026020010181905250600160008281526020019081526020016000206006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123a15780601f10612376576101008083540402835291602001916123a1565b820191906000526020600020905b81548152906001019060200180831161238457829003601f168201915b50505050508383815181106123b257fe5b602002602001018190525081806001019250505b8080600101915050612031565b50505b92959194509250565b8060016000848152602001908152602001600020600701819055505050565b612406612e51565b8b8160000181815250508a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816020018190525088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816040018190525086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050816060018190525084816080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160a00181905250818160c0018181525050600260008d81526020019081526020016000208190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000015560208201518160010190805190602001906125e9929190612dc3565b506040820151816002019080519060200190612606929190612dc3565b506060820151816003019080519060200190612623929190612dc3565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190612687929190612dc3565b5060c082015181600601555050505050505050505050505050565b6126aa612ea4565b600160008481526020019081526020016000206040518061010001604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561276c5780601f106127415761010080835404028352916020019161276c565b820191906000526020600020905b81548152906001019060200180831161274f57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561280e5780601f106127e35761010080835404028352916020019161280e565b820191906000526020600020905b8154815290600101906020018083116127f157829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128b05780601f10612885576101008083540402835291602001916128b0565b820191906000526020600020905b81548152906001019060200180831161289357829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129a85780601f1061297d576101008083540402835291602001916129a8565b820191906000526020600020905b81548152906001019060200180831161298b57829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a4a5780601f10612a1f57610100808354040283529160200191612a4a565b820191906000526020600020905b815481529060010190602001808311612a2d57829003601f168201915b505050505081526020016007820154815250508160000181905250828160200181815250506002600084815260200190815260200160002080549050816040018181525050818160600181815250508060036000848152602001908152602001600020600082015181600001600082015181600001556020820151816001019080519060200190612adc929190612dc3565b506040820151816002019080519060200190612af9929190612dc3565b506060820151816003019080519060200190612b16929190612dc3565b5060808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a0820151816005019080519060200190612b7a929190612dc3565b5060c0820151816006019080519060200190612b97929190612dc3565b5060e0820151816007015550506020820151816008015560408201518160090155606082015181600a0155905050505050565b600081604051602001612bdd91906135a9565b6040516020818303038152906040528051906020012083604051602001612c0491906135a9565b6040516020818303038152906040528051906020012014905092915050565b60008060005b6002600086815260200190815260200160002080549050811015612d60578373ffffffffffffffffffffffffffffffffffffffff16600260008781526020019081526020016000208281548110612c7c57fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612d5357600260008681526020019081526020016000208181548110612ce857fe5b906000526020600020906007020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600260008681526020019081526020016000208181548110612d3a57fe5b9060005260206000209060070201600601549150612d60565b8080600101915050612c29565b509250929050565b60405180610100016040528060008152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282612df95760008555612e40565b82601f10612e1257805160ff1916838001178555612e40565b82800160010185558215612e40579182015b82811115612e3f578251825591602001919060010190612e24565b5b509050612e4d9190612ed2565b5090565b6040518060e0016040528060008152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b6040518060800160405280612eb7612d68565b81526020016000815260200160008152602001600081525090565b5b80821115612eeb576000816000905550600101612ed3565b5090565b6000612f02612efd84613820565b6137ef565b905082815260208101848484011115612f1a57600080fd5b612f2584828561397b565b509392505050565b600081359050612f3c816139d0565b92915050565b60008083601f840112612f5457600080fd5b8235905067ffffffffffffffff811115612f6d57600080fd5b602083019150836001820283011115612f8557600080fd5b9250929050565b600082601f830112612f9d57600080fd5b8135612fad848260208601612eef565b91505092915050565b600081359050612fc5816139e7565b92915050565b60008060208385031215612fde57600080fd5b600083013567ffffffffffffffff811115612ff857600080fd5b61300485828601612f42565b92509250509250929050565b600080600080600080600080600080600060c08c8e03121561303157600080fd5b60008c013567ffffffffffffffff81111561304b57600080fd5b6130578e828f01612f42565b9b509b505060208c013567ffffffffffffffff81111561307657600080fd5b6130828e828f01612f42565b995099505060408c013567ffffffffffffffff8111156130a157600080fd5b6130ad8e828f01612f42565b975097505060606130c08e828f01612f2d565b95505060808c013567ffffffffffffffff8111156130dd57600080fd5b6130e98e828f01612f42565b945094505060a08c013567ffffffffffffffff81111561310857600080fd5b6131148e828f01612f42565b92509250509295989b509295989b9093969950565b6000806040838503121561313c57600080fd5b600083013567ffffffffffffffff81111561315657600080fd5b61316285828601612f8c565b925050602083013567ffffffffffffffff81111561317f57600080fd5b61318b85828601612f8c565b9150509250929050565b6000602082840312156131a757600080fd5b60006131b584828501612fb6565b91505092915050565b600080604083850312156131d157600080fd5b60006131df85828601612fb6565b92505060206131f085828601612f2d565b9150509250929050565b600080600080600080600080600080600060e08c8e03121561321b57600080fd5b60006132298e828f01612fb6565b9b505060208c013567ffffffffffffffff81111561324657600080fd5b6132528e828f01612f42565b9a509a505060408c013567ffffffffffffffff81111561327157600080fd5b61327d8e828f01612f42565b985098505060608c013567ffffffffffffffff81111561329c57600080fd5b6132a88e828f01612f42565b965096505060806132bb8e828f01612f2d565b94505060a08c013567ffffffffffffffff8111156132d857600080fd5b6132e48e828f01612f42565b935093505060c06132f78e828f01612fb6565b9150509295989b509295989b9093969950565b6000806040838503121561331d57600080fd5b600061332b85828601612fb6565b925050602061333c85828601612fb6565b9150509250929050565b6000613352838361338a565b60208301905092915050565b600061336a83836134e8565b905092915050565b600061337e838361358b565b60208301905092915050565b61339381613933565b82525050565b6133a281613933565b82525050565b60006133b382613880565b6133bd81856138d3565b93506133c883613850565b8060005b838110156133f95781516133e08882613346565b97506133eb836138ac565b9250506001810190506133cc565b5085935050505092915050565b60006134118261388b565b61341b81856138e4565b93508360208202850161342d85613860565b8060005b85811015613469578484038952815161344a858261335e565b9450613455836138b9565b925060208a01995050600181019050613431565b50829750879550505050505092915050565b600061348682613896565b61349081856138f5565b935061349b83613870565b8060005b838110156134cc5781516134b38882613372565b97506134be836138c6565b92505060018101905061349f565b5085935050505092915050565b6134e281613945565b82525050565b60006134f3826138a1565b6134fd8185613906565b935061350d81856020860161398a565b613516816139bf565b840191505092915050565b600061352c826138a1565b6135368185613917565b935061354681856020860161398a565b61354f816139bf565b840191505092915050565b6000613565826138a1565b61356f8185613928565b935061357f81856020860161398a565b80840191505092915050565b61359481613971565b82525050565b6135a381613971565b82525050565b60006135b5828461355a565b915081905092915050565b60006040820190506135d56000830185613399565b6135e2602083018461359a565b9392505050565b6000608082019050818103600083015261360381876133a8565b905081810360208301526136178186613406565b9050818103604083015261362b8185613406565b9050818103606083015261363f8184613406565b905095945050505050565b60006080820190508181036000830152613664818761347b565b905081810360208301526136788186613406565b9050818103604083015261368c8185613406565b905081810360608301526136a08184613406565b905095945050505050565b60006020820190506136c060008301846134d9565b92915050565b60006040820190506136db60008301856134d9565b6136e8602083018461359a565b9392505050565b600060a08201905081810360008301526137098188613521565b9050818103602083015261371d8187613521565b905081810360408301526137318186613521565b90506137406060830185613399565b81810360808301526137528184613521565b90509695505050505050565b600060808201905081810360008301526137788187613521565b9050818103602083015261378c8186613521565b905081810360408301526137a08185613521565b905081810360608301526137b48184613521565b905095945050505050565b600060408201905081810360008301526137d98185613521565b90506137e8602083018461359a565b9392505050565b6000604051905081810181811067ffffffffffffffff82111715613816576138156139bd565b5b8060405250919050565b600067ffffffffffffffff82111561383b5761383a6139bd565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061393e82613951565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156139a857808201518184015260208101905061398d565b838111156139b7576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b6139d981613933565b81146139e457600080fd5b50565b6139f081613971565b81146139fb57600080fd5b5056fea2646970667358221220c4d826dd3c28c18d72936bb85c3aaddca35ef1db226b4c20cd4c13da6067c49464736f6c63430007060033";

    public static final String FUNC_ADDRESPONSE = "addResponse";

    public static final String FUNC_COMPARESTRINGS = "compareStrings";

    public static final String FUNC_CREATEREQUEST = "createRequest";

    public static final String FUNC_GETREQUESTSIGNEDHX = "getRequestSignedHx";

    public static final String FUNC_GETREQUESTSBYSHIPMENTID = "getRequestsByShipmentId";

    public static final String FUNC_GETRESPONSEBYREQUESTID = "getResponseByRequestId";

    public static final String FUNC_GETRESPONSESIGNEDHX = "getResponseSignedHx";

    public static final String FUNC_LOADREQUESTDETAILS = "loadRequestDetails";

    public static final String FUNC_LOADRESPONSEDETAILS = "loadResponseDetails";

    public static final String FUNC_SETREQUESTSIGNEDHX = "setRequestSignedHx";

    public static final String FUNC_SUBMITBLOCK = "submitBlock";

    public static final String FUNC_VERIFYBLOCKS = "verifyBlocks";

    @Deprecated
    protected ProofOfLocation(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ProofOfLocation(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ProofOfLocation(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ProofOfLocation(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addResponse(BigInteger requestId, String shipmentId, String witnessLat, String witnessLng, String witnessAddr, String timestamp, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_ADDRESPONSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Utf8String(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(witnessLat), 
                new org.web3j.abi.datatypes.Utf8String(witnessLng), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr), 
                new org.web3j.abi.datatypes.Utf8String(timestamp), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> compareStrings(String a, String b) {
        final Function function = new Function(FUNC_COMPARESTRINGS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(a), 
                new org.web3j.abi.datatypes.Utf8String(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createRequest(String shipmentId, String sellerLat, String sellerLng, String sellerAddr, String preHx, String timestamp) {
        final Function function = new Function(
                FUNC_CREATEREQUEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(shipmentId), 
                new org.web3j.abi.datatypes.Utf8String(sellerLat), 
                new org.web3j.abi.datatypes.Utf8String(sellerLng), 
                new org.web3j.abi.datatypes.Address(160, sellerAddr), 
                new org.web3j.abi.datatypes.Utf8String(preHx), 
                new org.web3j.abi.datatypes.Utf8String(timestamp)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getRequestSignedHx(BigInteger requestId) {
        final Function function = new Function(FUNC_GETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>> getRequestsByShipmentId(String shipmentId) {
        final Function function = new Function(FUNC_GETREQUESTSBYSHIPMENTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(shipmentId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<BigInteger>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<BigInteger>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>> getResponseByRequestId(BigInteger requestId) {
        final Function function = new Function(FUNC_GETRESPONSEBYREQUESTID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<Tuple4<List<String>, List<String>, List<String>, List<String>>>(function,
                new Callable<Tuple4<List<String>, List<String>, List<String>, List<String>>>() {
                    @Override
                    public Tuple4<List<String>, List<String>, List<String>, List<String>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<String>, List<String>, List<String>, List<String>>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                                convertToNative((List<Utf8String>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getResponseSignedHx(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_GETRESPONSESIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> loadRequestDetails(BigInteger requestId) {
        final Function function = new Function(FUNC_LOADREQUESTDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple4<String, String, String, String>> loadResponseDetails(BigInteger requestId, String witnessAddr) {
        final Function function = new Function(FUNC_LOADRESPONSEDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.Address(160, witnessAddr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, String, String>>(function,
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setRequestSignedHx(BigInteger requestId, BigInteger signedHx) {
        final Function function = new Function(
                FUNC_SETREQUESTSIGNEDHX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(signedHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitBlock(BigInteger requestId, BigInteger preBlockHx) {
        final Function function = new Function(
                FUNC_SUBMITBLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(requestId), 
                new org.web3j.abi.datatypes.generated.Uint256(preBlockHx)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<Boolean, BigInteger>> verifyBlocks(BigInteger blockHx, BigInteger totalCount) {
        final Function function = new Function(FUNC_VERIFYBLOCKS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockHx), 
                new org.web3j.abi.datatypes.generated.Uint256(totalCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<Boolean, BigInteger>>(function,
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    @Deprecated
    public static ProofOfLocation load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLocation(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ProofOfLocation load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ProofOfLocation(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ProofOfLocation load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ProofOfLocation(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ProofOfLocation load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ProofOfLocation(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfLocation.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfLocation.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ProofOfLocation.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ProofOfLocation> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ProofOfLocation.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
